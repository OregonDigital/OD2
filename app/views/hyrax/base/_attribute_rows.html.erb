<%# FETCH: Fetch the label$uri by finding it in SolrDocument %>
<% solr_doc = SolrDocument.find(presenter.id) %>
<% @props.each do |prop| %>
  <% if prop[:is_controlled] %>
    <%# GET: Get the 'label$uri' from specific controlled vocab %>
    <% parse_cv = solr_doc.label_uri_helpers(prop[:name].gsub('_label', '')) %>
    <%# CONVERT: Then get it into a hash to fit with the form method %>
    <% hash_cv = parse_cv.map { |cv| [cv['label'], cv['uri']] }.to_h %>
    <% @presenter_value = presenter.attribute_to_html(prop[:name].to_sym, indices: prop[:indices], render_as: :search_and_external_link, links: hash_cv, html_dl: true, label: t("simple_form.labels.defaults.#{prop[:name]}"))%>
    <% unless @presenter_value.nil? || @presenter_value.empty? %>
      <%= @presenter_value %>
    <% end %>
  <% else %>
    <% @presenter_value = presenter.attribute_to_html(prop[:name].to_sym, html_dl: true, label: t("simple_form.labels.defaults.#{prop[:name_label].nil? ? prop[:name] : prop[:name_label]}")) %>
    <% unless @presenter_value.nil? || @presenter_value.empty? %>
      <%= @presenter_value %>
    <% end %>
  <% end %>
<% end %>
<% docs = [] %>
<% SolrDocument.find(presenter.non_user_collections).each do |doc| %>
  <% docs << doc if current_ability.can?(:read, doc) %>
<% end if !presenter.non_user_collections.blank? %>
<% unless docs.empty? %>
  <dt>Collections</dt>
  <dd><ul class="tabular">
    <% docs.each do |doc| %>
      <li class="attribute attribute-collections_label"><%= link_to doc.title_or_label, doc %><%= " (#{doc.visibility})" %></li><br>
    <% end %>
  </ul></dd>
<% end %>
<% if current_ability.admin? %>
  <%= presenter.attribute_to_html(:oai_collections, render_as: :collection_link, html_dl: true, label: t("simple_form.labels.defaults.primary_set")) %>
<% end %>