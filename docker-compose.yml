version: '3'

networks:
  external:
  internal:

volumes:
  db-dev:
  blazegraph-dev:
  fcrepo-dev:
  solr:
  redis-dev:
  bundled:

services:
  ##
  # Basic Rails application build image
  app: &app
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/data # mount current directory into the image
      - bundled:/usr/local/bundle
    networks:
      external:
      internal:
    # use tmpfs for tmp and log for performance and to allow
    # multiple builds in parallel. Both directories are mounted
    # into the image AFTER the working directory is mounted.
    tmpfs:
      - /data/log

  ##
  # Development environment for application
  dev: &dev
    <<: *app
    environment:
      - ACTIVE_JOB_QUEUE_ADAPTER=sidekiq
      - AWS_S3_APP_KEY=awss3key
      - AWS_S3_APP_SECRET=awsappsecret
      - AWS_S3_BUCKET=awss3uploadbucket
      - AWS_S3_INGEST_BUCKET=awss3ingestbucket
      - AWS_S3_DERIVATIVES_BUCKET=derivatives
      - AWS_S3_REGION=awss3region
      - S3_URL=http://minio:9000
      - BROWSEEVERYTHING_FILESYSTEM_PATH=/data/tmp
      - INGEST_LOCAL_PATH=/data/tmp
      - FEDORA_URL=http://fcrepo-dev:8080/fcrepo/rest
      - FITS_PATH=/opt/fits-1.0.5/fits.sh
      - GEONAMES_USERNAME=etsdev
      - HONEYCOMB_DATASET=od2-rails
      - HONEYCOMB_SERVICE=od2
      - HONEYCOMB_WRITEKEY=buzzzzzzzzzzzzzzzz
      - IIIF_SERVER_BASE_URL=http://localhost:8080/iiif
      - RAILS_CACHE_STORE_URL=memcache
      - RAILS_ENV=development
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_SERVE_STATIC_FILES=true
      - RDS_DB_NAME=postgres
      - RDS_HOSTNAME=db-dev
      - RDS_PASSWORD=postgres
      - RDS_PORT='5432'
      - RDS_USERNAME=postgres
      - RECAPTCHA_SECRET_KEY=asdfasdfasdfasdfasdfadsfasdfadfsfa
      - RECAPTCHA_SITE_KEY=asdfasdfadsfasdfasdfasdfasdfasdfad
      - REDIS_HOST=redis-dev
      - REDIS_PORT='6379'
      - SECRET_KEY_BASE=asdf
      - SIDEKIQ_ADMIN_SAFE_URLS='http://localhost:3000'
      - SOLR_URL=http://solr-dev:8983/solr/development
      - TRIPLESTORE_ADAPTER_TYPE=blazegraph
      - TRIPLESTORE_ADAPTER_URL=http://blazegraph-dev:8080/bigdata/namespace/kb/sparql
    depends_on:
      - db-dev
      - blazegraph-dev
      - solr-dev
      - fcrepo-dev
      - rais-dev
      - redis-dev
      - memcache
      - minio
      - workers
    expose:
      - 3000
  server:
    <<: *dev
    command: >
      bash -c "./build/entrypoint.sh &&
      bundle exec puma -C config/puma/development.rb --dir /data --pidfile /data/tmp/pids/puma.pid -b tcp://0.0.0.0:3000 &&
      tail -f log/development.log"
  workers:
    <<: *dev
    command: bash -c "./build/install_gems.sh && bundle exec sidekiq"
    depends_on:
      - db-dev
      - blazegraph-dev
      - solr-dev
      - fcrepo-dev
      - redis-dev
      - memcache
      - minio

  ##
  # Test environment for application
  test: &test
    <<: *app
    environment:
      - ACTIVE_JOB_QUEUE_ADAPTER=sidekiq
      - AWS_S3_APP_KEY=awss3key
      - AWS_S3_APP_SECRET=awsappsecret
      - AWS_S3_BUCKET=test-awss3uploadbucket
      - AWS_S3_INGEST_BUCKET=awss3ingestbucket
      - AWS_S3_DERIVATIVES_BUCKET=derivatives
      - AWS_S3_REGION=awss3region
      - S3_URL=http://minio-test:9000
      - BROWSEEVERYTHING_FILESYSTEM_PATH=/data/tmp
      - INGEST_LOCAL_PATH=/data/tmp
      - CAPYBARA_APP_HOST=http://test:3001
      - CAS_HOST=login.oregonstate.edu
      - CAS_URL=https://login.oregonstate.edu/cas
      - FEDORA_URL=http://fcrepo-test:8080/fcrepo/rest
      - FITS_PATH=/opt/fits-1.0.5/fits.sh
      - GEONAMES_USERNAME=etsdev
      - HONEYCOMB_DATASET=od2-rails
      - HONEYCOMB_SERVICE=od2
      - HONEYCOMB_WRITEKEY=buzzzzzzzzzzzzzzzz
      - IIIF_SERVER_BASE_URL=http://localhost:8080/iiif
      - RAILS_CACHE_STORE_URL=memcache
      - RAILS_ENV=test
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_SERVE_STATIC_FILES=true
      - RDS_DB_NAME=postgres
      - RDS_HOSTNAME=db-test
      - RDS_PASSWORD=postgres
      - RDS_PORT='5432'
      - RDS_USERNAME=postgres
      - RECAPTCHA_SECRET_KEY=asdfasdfasdfasdfasdfadsfasdfadfsfa
      - RECAPTCHA_SITE_KEY=asdfasdfadsfasdfasdfasdfasdfasdfad
      - REDIS_HOST=redis-test
      - REDIS_PORT='6379'
      - SAML_IDP_CERT=cert
      - SAML_URL=https://shibboleth-test.uoregon.edu/idp/profile/SAML2/Redirect/SSO
      - SAML_ISSUER=http://od2-staging.library.oregonstate.edu/users/auth/saml
      - SAML_PRIVATE_KEY=key
      - SECRET_KEY_BASE=asdf
      - SIDEKIQ_ADMIN_SAFE_URLS='http://localhost:3000'
      - SELENIUM_DRIVER_URL=http://selenium-hub:4444/wd/hub
      - SOLR_URL=http://solr-test:8983/solr/test
      - TRIPLESTORE_ADAPTER_TYPE=blazegraph
      - TRIPLESTORE_ADAPTER_URL=http://blazegraph-test:8080/bigdata/namespace/kb/sparql
    depends_on:
      - chrome
      - selenium-hub
      - db-test
      - blazegraph-test
      - solr-test
      - fcrepo-test
      - redis-test
      - rais-test
      - memcache
      - minio-test
    volumes:
      - .:/data # mount current directory into the image
      - ./tmp:/tmp
      - bundled:/usr/local/bundle
    command: >
      bash -c "./build/entrypoint.sh &&
      puma -b tcp://0.0.0.0:3001 -e test -d &&
      tail -f log/test.log"
    expose:
      - 3001

  ##
  # Selenium and Chrome for System (browser) tests
  selenium-hub:
    image: selenium/hub:3.141.5-astatine
    volumes:
      - ./spec/fixtures:/data/spec/fixtures
    networks:
      internal:
      external:
  chrome:
    image: selenium/node-chrome-debug:3.141.5-astatine
    volumes:
      - ./spec/fixtures:/data/spec/fixtures
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444
    expose:
      - 5900
    networks:
      internal:
      external:

  ##
  # SOLR Index server
  solr: &solr
    image: solr:6-alpine
    expose:
      - 8983
    networks:
      internal:
  solr-dev:
    <<: *solr
    volumes:
      - ./config/solr/config:/opt/solr/od2_conf
      - solr:/opt/solr/server/solr/mycores
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - development
      - /opt/solr/od2_conf
  solr-test:
    <<: *solr
    volumes:
      - ./config/solr/config:/opt/solr/od2_conf
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - test
      - /opt/solr/od2_conf

  ##
  # Fedora repository server
  fcrepo: &fcrepo
    image: ualbertalib/docker-fcrepo4:4.7
    environment:
      - JAVA_OPTS=${JAVA_OPTS} -Dfcrepo.modeshape.configuration="classpath:/config/file-simple/repository.json" -Dfcrepo.object.directory="/data/objects" -Dfcrepo.binary.directory="/data/binaries"
    expose:
      - 8080
    networks:
      internal:
  fcrepo-dev:
    <<: *fcrepo
    volumes:
      - fcrepo-dev:/data
  fcrepo-test:
    <<: *fcrepo
    tmpfs: /data

  ##
  # Fedora repository server
  blazegraph: &blazegraph
    image: lyrasis/blazegraph:2.1.5
    expose:
      - 8080
    networks:
      internal:
    command: bash -c "chmod a+wx /data && ./entrypoint.sh"
  blazegraph-dev:
    <<: *blazegraph
    volumes:
      - blazegraph-dev:/data
      - ./config/blazegraph/RWStore.properties:/RWStore.properties
  blazegraph-test:
    <<: *blazegraph
    volumes:
      - ./config/blazegraph/RWStore.properties:/RWStore.properties
    tmpfs: /data

  ##
  # Postgres database server
  db: &db
    image: postgres:10-alpine
    networks:
      internal:
  db-dev: &db-dev
    <<: *db
    environment:
      - POSTGRES_DB=development
    volumes:
      - db-dev:/var/lib/postgresql/data
  db-test:
    <<: *db
    environment:
      - POSTGRES_DB=test
    tmpfs: /var/lib/postgresql/data

  ##
  # Redis queue server
  redis: &redis
    image: redis:4-alpine
    command: redis-server
    networks:
      internal:
  redis-dev:
    <<: *redis
    volumes:
      - redis-dev:/data
  redis-test:
    <<: *redis
    tmpfs: /data

  ##
  # RAIS IIIF server
  rais: &rais
    image: uolibraries/rais:4-alpha
    environment:
      - RAIS_ADDRESS=:8080
      - RAIS_IIIFURL=http://localhost:8080/iiif
      - RAIS_S3CACHE=/var/tmp/rais/s3
      - RAIS_S3ZONE=us-west-2
      - RAIS_S3ENDPOINT=http://minio:9000
      - RAIS_PLUGINS=s3-images.so,json-tracer.so
      - AWS_ACCESS_KEY_ID=awss3key
      - AWS_SECRET_ACCESS_KEY=awsappsecret
    expose:
      - 8080
    networks:
      internal:
      external:
  rais-dev:
    <<: *rais
    volumes:
      - ./tmp/shared/derivatives:/var/local/images
  rais-test:
    <<: *rais
    volumes:
      - ./tmp/shared/derivatives:/var/local/images

  ##
  # Memcache cache server
  memcache:
    image: memcached
    networks:
      internal:

  # minio for dev against a local S3-compatible API
  minio:
    image: minio/minio
    command: minio server /data
    expose:
      - 9000
    environment:
      - MINIO_ACCESS_KEY=awss3key
      - MINIO_SECRET_KEY=awsappsecret
    volumes:
      - ./tmp/minio/data:/data
      - ./tmp/minio/config:/root/.minio
    networks:
      internal:
      external:

  # Test minio is self-contained - data dies on container exit
  minio-test:
    image: minio/minio
    command: minio server /data
    environment:
      - MINIO_ACCESS_KEY=awss3key
      - MINIO_SECRET_KEY=awsappsecret
    networks:
      internal:
      external:
