version: 2.1
orbs:
  docker-publish: circleci/docker-publish@0.1.7
jobs:
  checkout_code:
    docker:
      - image: circleci/ruby:2.5
    working_directory: ~/app
    steps:
      - restore_cache:
          name: Restore code from cache
          keys:
            - v1-source-{{ .Branch }}-{{ .Revision }}
      - checkout
      - save_cache:
          name: Save code cache
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'
      - persist_to_workspace:
          root: ~/
          paths:
            - app/*
            - app/**/*
  bundle:
    docker:
      - image: circleci/ruby:2.5-stretch-node-browsers
    environment:
      BUNDLE_PATH: vendor/bundle
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update Debian Packages for ClamAV
          command: |
            sudo apt-get install -y software-properties-common build-essential make apt-utils
      - restore_cache:
          name: Restore bundle from cache
          keys:
            - v2-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Update bundler
          command: gem install bundler -v 1.17.2
      - run:
          name: Install dependencies
          command: bundle check || bundle install
      - save_cache:
          name: Save bundle cache
          key: v2-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/app/vendor/bundle
      - persist_to_workspace:
          root: ~/
          paths:
            - app/*
            - app/**/*
  lint:
    docker:
      - image: circleci/ruby:2.5-stretch-node-browsers
    environment:
      BUNDLE_PATH: vendor/bundle
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run: bundle exec rubocop
  test:
    docker:
      - image: circleci/ruby:2.5-stretch-node-browsers
        environment:
          BUNDLE_PATH: vendor/bundle
          CAPYBARA_APP_HOST: http://test:3001
          FEDORA_URL: http://localhost:8080/fcrepo/rest
          HONEYCOMB_DATASET: od2-rails-test
          HONEYCOMB_DEBUG: 'true'
          HONEYCOMB_WRITEKEY: buzzzzzzzzzzzzzzzz
          HONEYCOMB_SERVICE: od2
          RAILS_ENV: test
          RDS_DB_NAME: test
          RDS_HOSTNAME: localhost
          RDS_PASSWORD: 'postgres'
          RDS_PORT: '5432'
          RDS_USERNAME: postgres
          REDIS_HOST: localhost
          REDIS_PORT: '6379'
          SECRET_KEY_BASE: bobross1234bobross1234bobross1234bobross1234bobross1234
          SOLR_URL: http://localhost:8985/solr/hydra-test
          TRIPLESTORE_ADAPTER_TYPE: blazegraph
          TRIPLESTORE_ADAPTER_URL: http://ci-test:8080/bigdata/namespace/rw/sparql
      - image: circleci/postgres:9.5-alpine-ram
        environment:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis:4
      - image: ualbertalib/docker-fcrepo4:4.7
        environment:
          CATALINA_OPTS: '-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms512m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC'
      - image: solr:8.3-slim
        command: bin/solr -cloud -noprompt -f -p 8985
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update Debian Packages
          command: |
            sudo apt-get update -qq
            sudo apt-get upgrade -qq
            sudo apt-get install -y -f software-properties-common build-essential nodejs make apt-utils ffmpeg
            sudo apt-get install -y openjdk-8-jre-headless ca-certificates-java
            sudo apt-get install -y openjdk-8-jre openjdk-8-jdk openjdk-8-jdk-headless
            sudo apt-get install -y imagemagick graphicsmagick libopenjp2-tools
      - run:
          name: Load config into SolrCloud
          command: |
            cd ./config/solr/config
            zip -1 -r solr_hyrax_config.zip ./*
            curl -H "Content-type:application/octet-stream" --data-binary @solr_hyrax_config.zip "http://localhost:8985/solr/admin/configs?action=UPLOAD&name=hyrax"
            curl -H 'Content-type: application/json' http://localhost:8985/api/collections/ -d '{create: {name: hydra-test, config: hyrax, numShards: 1}}'
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run: bundle exec rake db:create db:schema:load --trace
      - run:
          name: Run Tests
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out /tmp/test-results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: ./tmp/screenshots
      - store_artifacts:
          path: ./tmp/capybara
  build_and_push_beavernetes:
    parameters:
      repo:
        type: string
        default: ''
      environment:
        type: string
        default: 'production'
    executor:
      name: 'docker-publish/docker'
    environment:
      DOCKER_LOGIN: admin
      DOCKER_PASSWORD: admin
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate deployed version
          command: |
            export APP_VERSION=$(cat lib/oregon_digital/version.rb | grep VERSION | cut -d "=" -f 2 | sed "s/['\" ]//g")
            export GIT_SHORT_HASH=$(git rev-parse --short HEAD)
            export DATETIME=$(date "+%Y%m%d%H%M%S")
            echo export TAG="$DATETIME-$APP_VERSION-$GIT_SHORT_HASH" >> $BASH_ENV
            echo export DEPLOYED_VERSION="$DATETIME-$GIT_SHORT_HASH" >> $BASH_ENV
      - setup_remote_docker
      - docker-publish/check:
          registry: registry.library.oregonstate.edu
      - docker-publish/build:
          registry: registry.library.oregonstate.edu
          image: od2_web
          tag: $TAG
          extra_build_args: --build-arg RAILS_ENV=<< parameters.environment >> --build-arg DEPLOYED_VERSION=$DEPLOYED_VERSION
      - docker-publish/deploy:
          registry: registry.library.oregonstate.edu
          image: od2_web
workflows:
  ci:
    jobs:
      - checkout_code
      - bundle:
          requires:
            - checkout_code
      - lint:
          requires:
            - bundle
      - test:
          requires:
            - lint
          filters:
            branches:
              ignore: master
      - build_and_push_beavernetes:
          name: Build and push application image to Beavernetes image repository
          requires:
            - lint
          filters:
            branches:
              only: master
          repo: od2_web
