version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.8
  docker: circleci/docker@2.7.1
jobs:
  checkout_code:
    docker:
      - image: cimg/ruby:3.2
    working_directory: ~/app
    steps:
      - restore_cache:
          name: Restore code from cache
          keys:
            - v1-source-{{ .Branch }}-{{ .Revision }}
      - checkout
      - save_cache:
          name: Save code cache
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"
      - persist_to_workspace:
          root: ~/
          paths:
            - app/*
            - app/**/*
  bundle:
    docker:
      - image: cimg/ruby:3.2-browsers
    environment:
      BUNDLE_PATH: vendor/bundle
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update Debian Packages for ClamAV
          command: |
            # Temporary fix for Google Bundle
            wget -O - "https://dl.google.com/linux/linux_signing_key.pub" | sudo gpg --dearmor -o /etc/apt/keyrings/google-chrome.gpg
            echo 'c1db534ce40334b793cdbecba6459ddd21ebccbdef24dc603d6b0debcfb8f746  /etc/apt/keyrings/google-chrome.gpg' | sha256sum -c
            echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] https://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list > /dev/null
            sudo apt-get update &&
            sudo apt-get install -y software-properties-common build-essential make apt-utils
      - restore_cache:
          name: Restore bundle from cache
          keys:
            - v2-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Update bundler
          command: gem install bundler -v 2.1.4
      - run:
          name: Install dependencies
          command: bundle check || bundle install
      - save_cache:
          name: Save bundle cache
          key: v2-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/app/vendor/bundle
      - persist_to_workspace:
          root: ~/
          paths:
            - app/*
            - app/**/*
  lint:
    docker:
      - image: cimg/ruby:3.2-browsers
    environment:
      BUNDLE_PATH: vendor/bundle
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update bundler
          command: gem install bundler -v 2.1.4
      - run: bundle exec rubocop
  test:
    docker:
      - image: cimg/ruby:3.2-browsers
        environment:
          BUNDLE_PATH: vendor/bundle
          CAPYBARA_APP_HOST: http://test:3001
          FEDORA_URL: http://localhost:8080/fcrepo/rest
          HONEYCOMB_DATASET: od2-rails-test
          HONEYCOMB_DEBUG: "true"
          HONEYCOMB_WRITEKEY: buzzzzzzzzzzzzzzzz
          HONEYCOMB_SERVICE: od2
          HYRAX_VALKYRIE: true
          VALKYRIE_SOLR_CORE: hydra-test
          VALKYRIE_SOLR_PORT: "8985"
          RAILS_ENV: test
          RDS_DB_NAME: test
          RDS_HOSTNAME: localhost
          RDS_PASSWORD: "postgres"
          RDS_PORT: "5432"
          RDS_USERNAME: postgres
          REDIS_HOST: localhost
          REDIS_PORT: "6379"
          SECRET_KEY_BASE: bobross1234bobross1234bobross1234bobross1234bobross1234
          SOLR_URL: http://localhost:8985/solr/hydra-test
          TRIPLESTORE_ADAPTER_TYPE: blazegraph
          TRIPLESTORE_ADAPTER_URL: http://ci-test:8080/bigdata/namespace/rw/sparql
          YABEDA_PROMETHEUS_PATH: /tmp/prom
      - image: circleci/postgres:9.5-alpine-ram
        environment:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis:4
      - image: ualbertalib/docker-fcrepo4:4.7
        environment:
          CATALINA_OPTS: "-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms512m -Xmx1024m -XX:NewSize=256m -XX:MaxNewSize=256m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC"
      - image: solr:8.3-slim
        command: bin/solr -cloud -noprompt -f -p 8985
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update Debian Packages
          command: |
            # Temporary fix for Google Bundle
            wget -O - "https://dl.google.com/linux/linux_signing_key.pub" | sudo gpg --dearmor -o /etc/apt/keyrings/google-chrome.gpg
            echo 'c1db534ce40334b793cdbecba6459ddd21ebccbdef24dc603d6b0debcfb8f746  /etc/apt/keyrings/google-chrome.gpg' | sha256sum -c
            echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/google-chrome.gpg] https://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list > /dev/null
            sudo apt-get update -qq
            sudo apt-get upgrade -qq
            sudo apt-get install -y -f software-properties-common build-essential nodejs make apt-utils ffmpeg tesseract-ocr poppler-utils
            sudo apt-get install -y openjdk-8-jre-headless ca-certificates-java
            sudo apt-get install -y openjdk-8-jre openjdk-8-jdk openjdk-8-jdk-headless
            sudo apt-get install -y graphicsmagick libjpeg-turbo8-dev libopenjp2-tools libopenjp2-7 libopenjp2-7-dev libltdl-dev
      - run:
          name: Compile imagemagick with jp2 support
          command: |
            mkdir -p /tmp/im && \
            curl -sL https://www.imagemagick.org/archive/releases/ImageMagick-7.1.0-27.tar.xz \
            | tar -xJvf - -C /tmp/im && cd /tmp/im/ImageMagick-7.1.0-27 && \
              ./configure \
                --build=$CBUILD \
                --host=$CHOST \
                --prefix=/usr \
                --sysconfdir=/etc \
                --mandir=/usr/share/man \
                --infodir=/usr/share/info \
                --localstatedir=/var \
                --enable-shared \
                --disable-static \
                --with-modules \
                --with-threads \
                --with-openjp2=yes \
                --with-jpeg=yes \
                --with-tiff=yes \
                --with-gs-font-dir=/usr/share/fonts/Type1 \
                --with-quantum-depth=16 && \
              make -j`nproc` && \
              sudo make install && \
              rm -rf /tmp/im
      - run:
          name: Load config into SolrCloud
          command: |
            cd ./config/solr/conf
            zip -1 -r solr_hyrax_config.zip ./*
            curl -H "Content-type:application/octet-stream" --data-binary @solr_hyrax_config.zip "http://localhost:8985/solr/admin/configs?action=UPLOAD&name=hyrax"
            curl -H 'Content-type: application/json' http://localhost:8985/api/collections/ -d '{create: {name: hydra-test, config: hyrax, numShards: 1}}'
      - run:
          name: Create Prometheus Client Data Store
          command: mkdir -p $YABEDA_PROMETHEUS_PATH
      - run:
          name: Update bundler
          command: gem install bundler -v 2.1.4
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://localhost:6379 -timeout 1m
      - run: bundle exec rake db:create db:migrate db:schema:load --trace
      - browser-tools/install-chrome:
          replace-existing: true
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check browser install
      - run:
          name: Run Tests
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out /tmp/test-results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: ./tmp/screenshots
      - store_artifacts:
          path: ./tmp/capybara
  build_and_push_beavernetes:
    parameters:
      repo:
        type: string
        default: ""
      environment:
        type: string
        default: "production"
      fedora_url:
        type: string
        default: "http://fcrepo:8080/fcrepo/rest"
    executor:
      name: "docker/docker"
    environment:
      DOCKER_LOGIN: admin
      DOCKER_PASSWORD: admin
      RAILS_ENV: production
      FEDORA_URL: http://fcrepo:8080/fcrepo/rest
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate deployed version
          command: |
            export APP_VERSION=$(cat lib/oregon_digital/version.rb | grep VERSION | cut -d "=" -f 2 | sed "s/['\" ]//g")
            export GIT_SHORT_HASH=$(git rev-parse --short HEAD)
            export DATETIME=$(date "+%Y%m%d%H%M")
            export TAG="$DATETIME-$GIT_SHORT_HASH"
            export DEPLOYED_VERSION="$DATETIME-$GIT_SHORT_HASH"
            echo export RAILS_ENV="$RAILS_ENV" >> $BASH_ENV
            echo export TAG="$TAG" >> $BASH_ENV
            echo export DEPLOYED_VERSION="$DEPLOYED_VERSION" >> $BASH_ENV
      - setup_remote_docker:
          version: docker23
      - docker/check:
          registry: registry.library.oregonstate.edu
      - docker/pull:
          images: registry.library.oregonstate.edu/od2_web_v4_cache:latest
          ignore-docker-pull-error: true
      - docker/build:
          registry: registry.library.oregonstate.edu
          image: od2_web_v4
          tag: $TAG
          extra_build_args: --build-arg RAILS_ENV=$RAILS_ENV --build-arg FEDORA_URL=$FEDORA_URL --build-arg DEPLOYED_VERSION=$DEPLOYED_VERSION
          cache_from: registry.library.oregonstate.edu/od2_web_v4_cache:latest
      - docker/push:
          registry: registry.library.oregonstate.edu
          image: od2_web_v4
          tag: $TAG
      - docker/build:
          registry: registry.library.oregonstate.edu
          image: od2_web_v4_cache
          tag: "latest"
          extra_build_args: --target gems
          cache_from: registry.library.oregonstate.edu/od2_web_v4_cache:latest
          step-name: "Rebuild cache image"
      - docker/push:
          registry: registry.library.oregonstate.edu
          image: od2_web_v4_cache
          tag: latest
          step-name: "Push cache image"
workflows:
  ci:
    jobs:
      - checkout_code
      - bundle:
          requires:
            - checkout_code
      - lint:
          requires:
            - bundle
      - test:
          requires:
            - lint
          filters:
            branches:
              ignore:
                - master
                - feature/hyrax-4
      - build_and_push_beavernetes:
          name: Build and push application image to Beavernetes image repository
          requires:
            - lint
            - test
          filters:
            branches:
              only:
                - master
                - /infra\/.*/
                - /staging\/.*/
                - feature/hyrax-4
          repo: od2_web_v4
          environment: production
